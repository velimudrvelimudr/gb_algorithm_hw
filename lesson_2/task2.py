"""
Посчитать четные и нечетные цифры введенного натурального числа. Например, если введено число 34560, в нем 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).

Алгоритм.

Основной.
Начало (овал)
Запросить у пользователя число (параллелограмм)
передать введённое пользователем число  функции, подсчитывающей чётные и нечётные числа (прямоугольник)
Вернуть пользователю результат подсчёта (параллелограмм)
Конец (овал)

Алгоритм подсчёта чётных и нечётных цифр в числе.
Начало функции Подсчитать_числа(число, чётные (0 по умолчанию), нечётные(0 по умолчанию)) (овал, надо думать...)

Получить результат целочисленного деления (q) и остаток от деления (r) числа на 10 (прямоугольник)
Коммент: Базовый случай
Если q = 0 (ромб)
то если остаток от r/2 = 0 (ромб)
то увеличиваем счётчик чётных чисел на единицу (прямоугольник)
Возвращаем результат пользователю (параллелограмм)
иначе остаток от (r/2) неравно 0
Увеличиваем счётчик нечётных чисел на единицу (прямоугольник
Возвращаем пользователю результат (параллелограмм)
иначе (q неравно 0)
если остаток от r/2 равен нулю (ромб)
то возвращаем вызов функции с параметрами q, чётные + 1, нечётные (прямоугольник)
иначе
возвращаем вызов функции с параметрами q, чётные, нечётные + 1 (прямоугольник)
конец функции (овал, наверное)
"""

def count_digits(number: int, even: int=0, odd: int=0) -> str:
    """Считает количество чётных и нечётных цифр в заданном числе."""

    q, r = divmod(number, 10)

    # Базовое условие
    if q == 0:
        if r % 2 == 0:
            even += 1
        else:
            odd += 1
        return F"Число содержит {even} чётных и {odd} нечётных цифр."
    else:
        if r % 2 == 0:
            return count_digits(q, even + 1, odd)
        else:
            return count_digits(q, even, odd + 1)

digit = int(input("Введите натуральное число: "))

print(count_digits(digit))
