""" 1) Определение количества различных подстрок с использованием хеш-функции. Пусть на вход функции дана строка. Требуется вернуть количество различных подстрок в этой строке.
Примечание: в сумму не включаем пустую строку и строку целиком. """

def count_subs(s: str) -> int:
    """ Подсчитывает количество уникальных подстрок в строке. """

    hs = set() # Множество хэшей подстрок.

    for len_sub in range(1, len(s)): # len_sub - длина подстроки.
        sh = 0
        while sh + len_sub <= len(s): # Все подстроки заданной длины в строке.
            hs.add(hash(s[sh:sh + len_sub])) # Вычисляем хэш подстроки и добавляем его в множество.
            sh += 1
    return len(hs) # Возвращаем количество уникальных хэшей.

if __name__ == '__main__':
    print(f'Введённая строка содержит {count_subs(input("Введите строку: "))} подстрок')

""" Вот думаю, если бы я в set добавлял не хэши, а сами подстроки, что-то принципиально ухудшилось бы?
Здесь напрашивается некая проверка того, был ли данный хэш уже, или нет. Но я не придумал, куда девать имеющиеся хэши, кроме как в set. А в этом случае никаких проверок не требуется. """